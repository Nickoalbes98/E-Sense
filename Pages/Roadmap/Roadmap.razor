@page "/roadmap"
@using System.Net.Http.Json
@using static MyApplication.Dummy

<FilterTools />
<MudPaper Outlined="true" Class="pa-4">
    <div Class="my-6 flex-grow-1">
        <MudGrid Spacing="0">
            <MudItem xs="1">
                <div class="d-flex flex-column flex-grow-1 gap-1">
                    <div class="d-flex justify-center flex-grow-1 overflow-hidden" style="height: 50px;">
                        Epics
                    </div>
                    @foreach (var epic in _roadmaps)
                    {
                        <div class="d-flex justify-center flex-grow-1 overflow-hidden" style="height: 50px;">
                            <MudChip Color="Color.Secondary" Class="align-self-center">@epic.EpicName</MudChip>
                        </div>
                    }
                </div>
            </MudItem>
            <MudItem xs="11">
                <div class="d-flex flex-column flex-grow-1 gap-1 overflow-scroll">
                    <RoadmapHeader PixelsPerDay=@pixelsPerDay DaysInFourYears=@DaysInFourYears/>
                    @foreach (var epic in _roadmaps)
                    {
                        <MudPaper Width=@((DaysInFourYears * pixelsPerDay).ToString() + "px") Height="50px" Square="true"
                        Class="pa-2 mud-theme-primary">
                            <MudPaper Width=@((epic.Duration * pixelsPerDay).ToString() + "px") Height="100%"
                            Class="mud-theme-tertiary" Style=@("margin-left: " + (epic.DaysFromStartDate * pixelsPerDay).ToString()
                            +"px;") />
                        </MudPaper>
                    }
                </div>
            </MudItem>
        </MudGrid>
    </div>
</MudPaper>

@code {
    public class RoadmapGraph
    {
        public string EpicName { get; set; } = string.Empty;
        public DateTime StartDate { get; set; } = DateTime.Now;
        public DateTime EndDate { get; set; } = DateTime.Now;
        // Temporary properties as placeholders
        public int DaysFromStartDate { get; set; } = 0;
        public int Duration { get; set; } = 0;
    }

    private List<RoadmapGraph> _roadmaps = new();
    // 365 days per year plus 1 for leap year
    private const int DaysInFourYears = (365 * 4) + 1;
    private const int pixelsPerDay = 10;
    private DateTime dateStartRange = DateTime.Now.AddYears(-2);
    private DateTime dateEndRange = DateTime.Now.AddYears(2);
    private int monthCount = 0;
    protected override void OnInitialized()
    {
        monthCount = (dateEndRange - dateStartRange).Days / 30;
        for (var i = 0; i < monthCount; i++)
        {
            DateTime epicStartDate = dateStartRange.AddMonths(i);
            DateTime epicEndDate = epicStartDate.AddMonths(1);

            int daysFromStartDate = (epicStartDate - dateStartRange).Days;
            int epicDuration = (epicEndDate - epicStartDate).Days;

            _roadmaps.Add(new RoadmapGraph()
            {
                EpicName = i.ToString(),
                DaysFromStartDate = daysFromStartDate,
                Duration =
            epicDuration
            });
        }
    }
}